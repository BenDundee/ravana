from atomic_agents.agents.base_agent import BaseIOSchema
from pydantic import Field
from typing import List, Literal, Optional


class SearchAgentInputSchema(BaseIOSchema):
    """This is the input schema for the QueryAgent."""
    user_input: str = Field(..., description="Input from a user, for which queries will be generated")
    num_queries: int = Field(..., description="The number of search queries to generate.")


class SearchAgentOutputSchema(BaseIOSchema):
    """This is the output schema for the QueryAgent."""
    queries: List[str] = Field(..., description="A list of search queries generated by the agent.")


class SearchResultItem(BaseIOSchema):
    """This schema represents a single search result item"""
    url: str = Field(..., description="The URL of the search result")
    title: Optional[str] = Field(None, description="The title of the search result")
    content: Optional[str] = Field(None, description="The content snippet of the search result")
    query: str = Field(..., description="The query used to obtain this search result")


class SearchToolInputSchema(BaseIOSchema):
    """
    Schema for input to a tool for searching for information, news, references, and other content using SearxNG.
    Returns a list of search results with a short description or content snippet and URLs for further exploration
    """

    queries: List[str] = Field(..., description="List of search queries.")
    category: Optional[Literal["general", "news", "social_media"]] = Field(
        "general", description="Category of the search queries."
    )


class SearchToolOutputSchema(BaseIOSchema):
    """This schema represents the output of the SearxNG search tool."""
    results: List[SearchResultItem] = Field(..., description="List of search result items")
    category: Optional[str] = Field(None, description="The category of the search results")
